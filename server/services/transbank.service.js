const { WebpayPlus, Environment, IntegrationCommerceCodes, IntegrationApiKeys } = require('transbank-sdk');
const dotenv = require('dotenv');

dotenv.config();

/**
 * Configuraci√≥n de Transbank seg√∫n el entorno
 */
const getTransbankConfig = () => {
  const environment = process.env.TRANSBANK_ENVIRONMENT || 'integration';
  
  if (environment === 'production') {
    return {
      commerceCode: process.env.TRANSBANK_COMMERCE_CODE,
      apiKey: process.env.TRANSBANK_API_KEY,
      environment: Environment.Production
    };
  } else {
    // Configuraci√≥n de integraci√≥n/testing
    return {
      commerceCode: IntegrationCommerceCodes.WEBPAY_PLUS,
      apiKey: IntegrationApiKeys.WEBPAY,
      environment: Environment.Integration
    };
  }
};

// Configurar cliente de Webpay
const config = getTransbankConfig();
const tx = new WebpayPlus.Transaction({
  commerceCode: config.commerceCode,
  apiKey: config.apiKey,
  environment: config.environment
});

console.log(`üè™ Transbank configurado en modo: ${process.env.TRANSBANK_ENVIRONMENT || 'integration'}`);

/**
 * Genera un buyOrder v√°lido para Transbank (m√°ximo 26 caracteres)
 * @param {string} orderId - ID de la orden
 * @returns {string} - buyOrder v√°lido
 */
const generateBuyOrder = (orderId) => {
  // Tomar solo los √∫ltimos 12 caracteres del orderId (suficiente para MongoDB ObjectId)
  const shortOrderId = orderId.toString().slice(-12);
  
  // Generar timestamp corto (√∫ltimos 8 d√≠gitos del timestamp)
  const shortTimestamp = Date.now().toString().slice(-8);
  
  // Formato: O + shortOrderId + T + shortTimestamp = m√°ximo 23 caracteres
  const buyOrder = `O${shortOrderId}T${shortTimestamp}`;
  
  // Verificar que no exceda 26 caracteres
  if (buyOrder.length > 26) {
    console.warn(`‚ö†Ô∏è buyOrder muy largo (${buyOrder.length}): ${buyOrder}`);
    // Si a√∫n es muy largo, usar solo timestamp
    return `ORDER${Date.now().toString().slice(-18)}`;
  }
  
  console.log(`üìã buyOrder generado: ${buyOrder} (${buyOrder.length} caracteres)`);
  return buyOrder;
};

/**
 * Genera un sessionId v√°lido para Transbank
 * @param {string} userId - ID del usuario
 * @returns {string} - sessionId v√°lido
 */
const generateSessionId = (userId) => {
  // Tomar solo los √∫ltimos 12 caracteres del userId
  const shortUserId = userId.toString().slice(-12);
  
  // Generar timestamp corto
  const shortTimestamp = Date.now().toString().slice(-10);
  
  // Formato: S + shortUserId + T + shortTimestamp
  const sessionId = `S${shortUserId}T${shortTimestamp}`;
  
  console.log(`üîë sessionId generado: ${sessionId} (${sessionId.length} caracteres)`);
  return sessionId;
};

/**
 * Crea una transacci√≥n de pago en Webpay
 * @param {Object} orderData - Datos de la orden
 * @returns {Promise<Object>} - Respuesta de Webpay con token y URL
 */
exports.createPaymentTransaction = async (orderData) => {
  try {
    console.log('üí≥ Creando transacci√≥n Webpay para orden:', orderData._id);
    
    // Validar datos esenciales
    if (!orderData || !orderData._id || !orderData.totalPrice) {
      throw new Error('Datos de orden incompletos para crear transacci√≥n');
    }

    // ‚úÖ CORREGIDO: Generar buyOrder con longitud v√°lida
    const buyOrder = generateBuyOrder(orderData._id);
    const sessionId = generateSessionId(orderData.user._id);
    const amount = Math.round(orderData.totalPrice); // Transbank requiere enteros
    const returnUrl = `${process.env.BASE_URL || 'http://localhost:5000'}/api/payment/webpay/return`;

    console.log('üìä Datos de transacci√≥n Webpay:', {
      buyOrder,
      sessionId,
      amount,
      returnUrl,
      buyOrderLength: buyOrder.length,
      sessionIdLength: sessionId.length
    });

    // Validar longitudes antes de enviar a Transbank
    if (buyOrder.length > 26) {
      throw new Error(`buyOrder muy largo: ${buyOrder.length} caracteres (m√°ximo 26)`);
    }

    if (sessionId.length > 61) {
      throw new Error(`sessionId muy largo: ${sessionId.length} caracteres (m√°ximo 61)`);
    }

    // Crear transacci√≥n en Transbank
    const response = await tx.create(buyOrder, sessionId, amount, returnUrl);
    
    console.log('‚úÖ Transacci√≥n Webpay creada:', {
      token: response.token,
      url: response.url
    });

    return {
      token: response.token,
      url: response.url,
      buyOrder,
      sessionId,
      amount
    };
  } catch (error) {
    console.error('‚ùå Error al crear transacci√≥n Webpay:', error);
    
    // Proporcionar m√°s detalles del error si est√° disponible
    if (error.response) {
      console.error('üìã Detalles del error de Transbank:', error.response.data || error.response);
    }
    
    throw new Error(`No se pudo crear la transacci√≥n de pago: ${error.message}`);
  }
};

/**
 * Confirma una transacci√≥n de pago en Webpay
 * @param {string} token - Token de la transacci√≥n
 * @returns {Promise<Object>} - Informaci√≥n de la transacci√≥n confirmada
 */
exports.confirmPaymentTransaction = async (token) => {
  try {
    console.log('üîç Confirmando transacci√≥n Webpay con token:', token);
    
    if (!token) {
      throw new Error('Token de transacci√≥n requerido');
    }

    // Confirmar transacci√≥n en Transbank
    const response = await tx.commit(token);
    
    console.log('‚úÖ Transacci√≥n Webpay confirmada:', {
      buyOrder: response.buy_order,
      authorizationCode: response.authorization_code,
      responseCode: response.response_code,
      amount: response.amount
    });

    // Mapear estados de Transbank a nuestro sistema
    const isApproved = response.response_code === 0; // 0 = aprobada
    const status = isApproved ? 'approved' : 'rejected';

    return {
      buyOrder: response.buy_order,
      sessionId: response.session_id,
      amount: response.amount,
      authorizationCode: response.authorization_code,
      responseCode: response.response_code,
      status,
      isApproved,
      transactionDate: response.transaction_date,
      paymentTypeCode: response.payment_type_code,
      cardDetail: response.card_detail || {},
      installmentsNumber: response.installments_number || 0,
      raw: response // Guardar respuesta completa para auditor√≠a
    };
  } catch (error) {
    console.error('‚ùå Error al confirmar transacci√≥n Webpay:', error);
    
    if (error.response) {
      console.error('üìã Detalles del error de confirmaci√≥n:', error.response.data || error.response);
    }
    
    throw new Error(`No se pudo confirmar la transacci√≥n: ${error.message}`);
  }
};

/**
 * Obtiene el estado de una transacci√≥n
 * @param {string} token - Token de la transacci√≥n
 * @returns {Promise<Object>} - Estado de la transacci√≥n
 */
exports.getTransactionStatus = async (token) => {
  try {
    console.log('üìä Obteniendo estado de transacci√≥n Webpay:', token);
    
    // En Webpay, el estado se obtiene al confirmar
    // Esta funci√≥n es principalmente para compatibilidad
    const transactionInfo = await exports.confirmPaymentTransaction(token);
    
    return {
      token,
      status: transactionInfo.status,
      isApproved: transactionInfo.isApproved,
      amount: transactionInfo.amount,
      timestamp: new Date()
    };
  } catch (error) {
    console.error('‚ùå Error al obtener estado de transacci√≥n:', error);
    
    return {
      token,
      status: 'error',
      isApproved: false,
      error: error.message,
      timestamp: new Date()
    };
  }
};

/**
 * Maneja la respuesta de anulaci√≥n (refund)
 * @param {string} token - Token de la transacci√≥n original
 * @param {number} amount - Monto a anular
 * @returns {Promise<Object>} - Resultado de la anulaci√≥n
 */
exports.refundTransaction = async (token, amount) => {
  try {
    console.log('üîÑ Iniciando anulaci√≥n Webpay:', { token, amount });
    
    // Nota: Para anulaciones en Webpay, generalmente se usa WebpayPlus.Refund
    // pero requiere configuraci√≥n adicional y autorizaci√≥n especial
    
    // Por ahora, simulamos el proceso para desarrollo
    console.log('‚ö†Ô∏è Anulaci√≥n simulada - En producci√≥n implementar WebpayPlus.Refund');
    
    return {
      success: true,
      token,
      amount,
      refundId: `REFUND_${Date.now()}`,
      status: 'completed',
      timestamp: new Date(),
      note: 'Anulaci√≥n simulada - Implementar WebpayPlus.Refund para producci√≥n'
    };
  } catch (error) {
    console.error('‚ùå Error en anulaci√≥n Webpay:', error);
    
    return {
      success: false,
      token,
      amount,
      error: error.message,
      timestamp: new Date()
    };
  }
};

/**
 * Valida configuraci√≥n de Transbank
 * @returns {Object} - Estado de la configuraci√≥n
 */
exports.validateConfiguration = () => {
  const config = getTransbankConfig();
  
  return {
    environment: process.env.TRANSBANK_ENVIRONMENT || 'integration',
    commerceCode: config.commerceCode,
    hasApiKey: !!config.apiKey,
    isProduction: process.env.TRANSBANK_ENVIRONMENT === 'production',
    timestamp: new Date()
  };
};

/**
 * Funci√≥n de utilidad para extraer orderId de buyOrder
 * @param {string} buyOrder - buyOrder generado
 * @returns {string} - orderId extra√≠do
 */
exports.extractOrderIdFromBuyOrder = (buyOrder) => {
  try {
    // Formato: O{orderId}T{timestamp}
    if (buyOrder.startsWith('O') && buyOrder.includes('T')) {
      const parts = buyOrder.split('T');
      return parts[0].substring(1); // Remover la 'O' inicial
    }
    
    // Formato legacy: ORDER_{orderId}_{timestamp}
    if (buyOrder.includes('_')) {
      const parts = buyOrder.split('_');
      return parts[1];
    }
    
    return null;
  } catch (error) {
    console.error('Error extrayendo orderId de buyOrder:', error);
    return null;
  }
};

module.exports = exports;