// server/test/webpay-test.js
const transbankService = require('../services/transbank.service');
const Order = require('../models/Order');
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

// Conectar a la base de datos
mongoose.connect(process.env.MONGO_URI);

/**
 * Script de pruebas para validar la integraci√≥n con Webpay
 */
class WebpayTester {
  
  static async testConfiguration() {
    console.log('üîß Probando configuraci√≥n de Webpay...');
    
    try {
      const config = transbankService.validateConfiguration();
      
      console.log('üìã Configuraci√≥n actual:');
      console.log(`   - Entorno: ${config.environment}`);
      console.log(`   - C√≥digo de comercio: ${config.commerceCode}`);
      console.log(`   - Tiene API Key: ${config.hasApiKey ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Es producci√≥n: ${config.isProduction ? '‚úÖ' : '‚ùå'}`);
      
      if (config.environment === 'integration') {
        console.log('‚ÑπÔ∏è  Usando credenciales de integraci√≥n de Transbank');
      }
      
      return config;
    } catch (error) {
      console.error('‚ùå Error en configuraci√≥n:', error.message);
      throw error;
    }
  }
  
  static async testCreateTransaction() {
    console.log('\nüí≥ Probando creaci√≥n de transacci√≥n...');
    
    try {
      // Crear orden de prueba
      const testOrder = {
        _id: new mongoose.Types.ObjectId(),
        totalPrice: 15000,
        user: {
          _id: new mongoose.Types.ObjectId(),
          name: 'Usuario Test',
          email: 'test@example.com'
        },
        items: [
          {
            product: {
              name: 'Producto de prueba',
              description: 'Descripci√≥n de prueba'
            },
            quantity: 1,
            price: 15000
          }
        ]
      };
      
      console.log(`üì¶ Creando transacci√≥n para orden ${testOrder._id}`);
      console.log(`üí∞ Monto: $${testOrder.totalPrice.toLocaleString()}`);
      
      const transaction = await transbankService.createPaymentTransaction(testOrder);
      
      console.log('‚úÖ Transacci√≥n creada exitosamente:');
      console.log(`   - Token: ${transaction.token}`);
      console.log(`   - URL: ${transaction.url}`);
      console.log(`   - Buy Order: ${transaction.buyOrder}`);
      console.log(`   - Session ID: ${transaction.sessionId}`);
      console.log(`   - Monto: $${transaction.amount.toLocaleString()}`);
      
      // Guardar token para pruebas posteriores
      this.lastTestToken = transaction.token;
      
      return transaction;
    } catch (error) {
      console.error('‚ùå Error creando transacci√≥n:', error.message);
      throw error;
    }
  }
  
  static async testInvalidTransaction() {
    console.log('\nüö´ Probando validaci√≥n de datos inv√°lidos...');
    
    try {
      // Intentar crear transacci√≥n sin datos
      await transbankService.createPaymentTransaction(null);
      console.log('‚ùå ERROR: Deber√≠a haber fallado con datos nulos');
    } catch (error) {
      console.log('‚úÖ Validaci√≥n correcta para datos nulos:', error.message);
    }
    
    try {
      // Intentar crear transacci√≥n con monto inv√°lido
      const invalidOrder = {
        _id: new mongoose.Types.ObjectId(),
        totalPrice: 0, // Monto inv√°lido
        user: { _id: new mongoose.Types.ObjectId() }
      };
      
      await transbankService.createPaymentTransaction(invalidOrder);
      console.log('‚ùå ERROR: Deber√≠a haber fallado con monto 0');
    } catch (error) {
      console.log('‚úÖ Validaci√≥n correcta para monto inv√°lido:', error.message);
    }
  }
  
  static async testTransactionStatus() {
    console.log('\nüìä Probando obtenci√≥n de estado...');
    
    if (!this.lastTestToken) {
      console.log('‚ö†Ô∏è  No hay token de prueba disponible, saltando test');
      return;
    }
    
    try {
      console.log(`üîç Consultando estado del token: ${this.lastTestToken}`);
      
      const status = await transbankService.getTransactionStatus(this.lastTestToken);
      
      console.log('üìã Estado obtenido:');
      console.log(`   - Token: ${status.token}`);
      console.log(`   - Estado: ${status.status}`);
      console.log(`   - Aprobado: ${status.isApproved ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Monto: $${status.amount?.toLocaleString() || 'N/A'}`);
      
      return status;
    } catch (error) {
      console.log('‚ÑπÔ∏è  Error esperado al consultar transacci√≥n no confirmada:', error.message);
    }
  }
  
  static async testRefund() {
    console.log('\nüîÑ Probando proceso de anulaci√≥n...');
    
    try {
      const testToken = 'test_token_' + Date.now();
      const testAmount = 10000;
      
      console.log(`üí∏ Simulando anulaci√≥n de $${testAmount.toLocaleString()}`);
      
      const refund = await transbankService.refundTransaction(testToken, testAmount);
      
      console.log('üìã Resultado de anulaci√≥n:');
      console.log(`   - √âxito: ${refund.success ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Token: ${refund.token}`);
      console.log(`   - Monto: $${refund.amount?.toLocaleString()}`);
      console.log(`   - ID Anulaci√≥n: ${refund.refundId}`);
      console.log(`   - Nota: ${refund.note}`);
      
      return refund;
    } catch (error) {
      console.error('‚ùå Error en anulaci√≥n:', error.message);
    }
  }
  
  static async runAllTests() {
    console.log('üß™ INICIANDO PRUEBAS DE WEBPAY');
    console.log('================================\n');
    
    const results = {
      configuration: null,
      createTransaction: null,
      invalidTransaction: null,
      transactionStatus: null,
      refund: null,
      startTime: new Date(),
      endTime: null,
      success: false
    };
    
    try {
      // Test 1: Configuraci√≥n
      results.configuration = await this.testConfiguration();
      
      // Test 2: Crear transacci√≥n v√°lida
      results.createTransaction = await this.testCreateTransaction();
      
      // Test 3: Validar datos inv√°lidos
      results.invalidTransaction = await this.testInvalidTransaction();
      
      // Test 4: Estado de transacci√≥n
      results.transactionStatus = await this.testTransactionStatus();
      
      // Test 5: Anulaci√≥n
      results.refund = await this.testRefund();
      
      results.endTime = new Date();
      results.success = true;
      
      console.log('\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS');
      console.log('================================');
      console.log(`‚è±Ô∏è  Tiempo total: ${results.endTime - results.startTime}ms`);
      console.log('üéâ Webpay est√° listo para usar!');
      
    } catch (error) {
      results.endTime = new Date();
      results.success = false;
      
      console.log('\n‚ùå PRUEBAS FALLARON');
      console.log('==================');
      console.error('üí• Error:', error.message);
      console.log('\nüîß Verifica tu configuraci√≥n y credenciales de Transbank');
    }
    
    return results;
  }
  
  static async generateTestReport() {
    console.log('\nüìä Generando reporte de pruebas...');
    
    const report = await this.runAllTests();
    
    // Guardar reporte en archivo
    const fs = require('fs');
    const path = require('path');
    
    const reportPath = path.join(__dirname, '..', 'reports');
    if (!fs.existsSync(reportPath)) {
      fs.mkdirSync(reportPath, { recursive: true });
    }
    
    const reportFile = path.join(reportPath, `webpay-test-${Date.now()}.json`);
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    
    console.log(`üìã Reporte guardado en: ${reportFile}`);
    
    return report;
  }
}

// Ejecutar pruebas si se llama directamente
if (require.main === module) {
  (async () => {
    try {
      const action = process.argv[2];
      
      if (action === '--report') {
        await WebpayTester.generateTestReport();
      } else if (action === '--config') {
        await WebpayTester.testConfiguration();
      } else {
        await WebpayTester.runAllTests();
      }
      
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Error en pruebas:', error);
      process.exit(1);
    }
  })();
}

module.exports = WebpayTester;